from config.config import ELEVEN_LABS_KEY, SERVERS
import discord
from discord import app_commands
from discord import FFmpegPCMAudio
import asyncio
from GPT_stories import *
import requests
from utils.gpt import generate_gpt_response

class SpeakCommand(app_commands.Cog, name="speak"):
    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(name="speak", description="Speaks the response generated by GPT-3 in a voice channel.")
    @app_commands.guilds(SERVERS)
    async def speak(self, interaction: discord.Interaction, user_input: str, speaker: str = "bread", role: str = "bread"):
        await interaction.response.defer()
        if interaction.user.voice is None or interaction.user.voice.channel is None:
            await interaction.followup.send("You are not in a voice channel. Please use the `askbread` command if you just want text responses.")
            return
        if interaction.guild.voice_client is not None and interaction.guild.voice_client.is_playing():
            await interaction.followup.send("I'm currently speaking. Please try again later.")
            return
        speaker_voices = {
            "bread": "saUfe5jyFdcsZbN5Yt1c",
            "jp": "uERblY4ce8BC2FzPBGxR",
            "obama": "XbDmFt8IDl7dQjpNVO1f",
            "chris": "H8uduO2F47eLZMUNZvUf",
            "mangohawk": "ZuAcH52R3qZnDMjlvT1w",
            "cowboy": "KTPVrSVAEUSJRClDzBw7",
        }
        voice_id = speaker_voices.get(speaker.lower(), speaker_voices["bread"])  # Default to "bread" if speaker is not found
        story = getStoryByRole(role, interaction.user.id)
        model = "gpt-3.5-turbo"
        response_message = await generate_gpt_response(model, story, user_input)

        await interaction.followup.send(f"üó£Ô∏è **Banana Bread says:** \"{response_message}\"")

        # ElevenLabs API request to get the MP3 file
        headers = {
            "Accept": "audio/mpeg",
            "Content-Type": "application/json",
            "xi-api-key": ELEVEN_LABS_KEY
        }
        data = {
            "text": response_message,
            "model_id": "eleven_multilingual_v2",
            "voice_id": voice_id,
            "voice_settings": {
                "stability": 0.5,
                "similarity_boost": 0.75,
                "style_exaggeration": 0.0,
                "speaker_boost": True
            }
        }
        url = f"https://api.elevenlabs.io/v1/text-to-speech/{voice_id}"
        response = requests.post(url, json=data, headers=headers)

        file_path = f'{interaction.guild.id}_temp_response.mp3'
        with open(file_path, 'wb') as f:
            f.write(response.content)
        if interaction.user.voice:
            voice_channel = interaction.user.voice.channel
            try:
                vc = await voice_channel.connect()
            except discord.Forbidden:
                await interaction.response.send_message("I don't have permission to join that voice channel.")
                return
            except discord.ClientException:
                await interaction.response.send_message("I'm already connected to a voice channel.")
                return
            try:
                audio_source = FFmpegPCMAudio(file_path)
                if not vc.is_playing():
                    vc.play(audio_source, after=lambda e: print('Finished playing', e))

                    while vc.is_playing():
                        await asyncio.sleep(1)
                    await vc.disconnect()
                else:
                    await interaction.response.send_message("I'm currently speaking. Please wait until I'm finished.")
                    await vc.disconnect()
            except Exception as e:
                await interaction.response.send_message(f"üó£Ô∏è **Banana Bread Errors with:** \"{e}\"")
        else:
            await interaction.response.send_message("You are not in a voice channel.")

def setup(bot):
    bot.add_cog(SpeakCommand(bot))
